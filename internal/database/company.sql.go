// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: company.sql

package database

import (
	"context"
	"database/sql"
)

const getCompanyByStockCode = `-- name: GetCompanyByStockCode :one

SELECT stock_code, company_name, country_code, sector, subsector, listing_date, profile_source_url, profile_last_scraped_at, created_at, updated_at FROM companies
WHERE stock_code = $1
`

// Explicitly update this via trigger or NOW()
// Retrieves a company's profile by its stock code.
func (q *Queries) GetCompanyByStockCode(ctx context.Context, stockCode string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByStockCode, stockCode)
	var i Company
	err := row.Scan(
		&i.StockCode,
		&i.CompanyName,
		&i.CountryCode,
		&i.Sector,
		&i.Subsector,
		&i.ListingDate,
		&i.ProfileSourceUrl,
		&i.ProfileLastScrapedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertCompany = `-- name: UpsertCompany :exec
INSERT INTO companies (
    stock_code,
    company_name,
    country_code,
    sector,
    subsector,
    listing_date,            -- Make sure your Go code can pass NULL for this if not available
    profile_source_url,      -- Make sure your Go code can pass NULL
    profile_last_scraped_at, -- This will be set by the query
    created_at,              -- Handled by DB default on INSERT
    updated_at               -- Handled by DB default on INSERT or trigger on UPDATE
) VALUES (
    $1,
    $2,
    $3,          -- Will be string or NULL from Go
    $4,                -- Will be string or NULL from Go
    $5,             -- Will be string or NULL from Go
    $6,          -- Will be time.Time or NULL from Go
    $7,    -- Will be string or NULL from Go
    NOW(),                           -- Set profile_last_scraped_at to current time
    DEFAULT,                         -- Use default for created_at on new insert
    DEFAULT                          -- Use default for updated_at on new insert
)
ON CONFLICT (stock_code) DO UPDATE SET
    company_name = EXCLUDED.company_name,
    country_code = EXCLUDED.country_code,
    sector = EXCLUDED.sector,
    subsector = EXCLUDED.subsector,
    listing_date = EXCLUDED.listing_date,
    profile_source_url = EXCLUDED.profile_source_url,
    profile_last_scraped_at = NOW(), -- Update this timestamp on conflict
    updated_at = NOW()
`

type UpsertCompanyParams struct {
	StockCode        string
	CompanyName      string
	CountryCode      sql.NullString
	Sector           sql.NullString
	Subsector        sql.NullString
	ListingDate      sql.NullTime
	ProfileSourceUrl sql.NullString
}

// Inserts a new company profile or updates an existing one based on stock_code.
func (q *Queries) UpsertCompany(ctx context.Context, arg UpsertCompanyParams) error {
	_, err := q.db.ExecContext(ctx, upsertCompany,
		arg.StockCode,
		arg.CompanyName,
		arg.CountryCode,
		arg.Sector,
		arg.Subsector,
		arg.ListingDate,
		arg.ProfileSourceUrl,
	)
	return err
}
